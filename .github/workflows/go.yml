name: Go

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    name: Build & Publish binaries
    if: "!contains(github.event.head_commit.message, '[skip-ci]')"
    runs-on: ubuntu-latest
    steps:
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.13.8
        id: go

      - name: Check out code
        uses: actions/checkout@v2

      - name: Get dependencies
        run: |
          go get -v -t -d ./...
          if [ -f Gopkg.toml ]; then
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              dep ensure
          fi

      - name: Set SHORTSHA
        id: sha
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Read version
        id: version_env
        uses: falti/dotenv-action@v0.2.4
        with:
          path: .version

      - name: Build
        env:
          LDFLAGS: "-X main.appVersion=${{ steps.version_env.outputs.version }} -X main.shortSha=${{ steps.sha.outputs.sha_short }}"
        run: go build -v -ldflags="${{ env.LDFLAGS }}" .

      - name: Publish
        env:
          CGO_ENABLED: 0
          LDFLAGS: "-X main.appVersion=${{ steps.version_env.outputs.version }} -X main.shortSha=${{ steps.sha.outputs.sha_short }}"
        run: |
          go get github.com/mitchellh/gox
          go get github.com/tcnksm/ghr
          gox -os="linux freebsd netbsd" -arch="amd64 arm arm64 386" -parallel=8 -ldflags "${{ env.LDFLAGS }}" -output "dist/mikrotik-exporter_{{.OS}}_{{.Arch}}"
          ghr -t ${{ github.token }} -u ${{ github.actor }} -r Mikrotik-Exporter -replace ${{ steps.version_env.outputs.version }} dist/

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: binaries
          path: dist/mikrotik-exporter_linux_*

  docker:
    name: Build & Publish Docker image
    if: "!contains(github.event.head_commit.message, '[skip-ci]')"
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: binaries
          path: dist/

      - name: Display binary list
        run: ls -R
        working-directory: dist/

      - name: Read version
        id: version_env
        uses: falti/dotenv-action@v0.2.4
        with:
          path: .version

      - name: Prepare
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username "${{ github.actor }}" --password-stdin

      - name: Docker build
        run: |
          docker build -t hatamiarash7/mikrotik-exporter:manifest-amd64 --build-arg BASE_ARCH=amd64 --build-arg BINARY_ARCH=amd64 .
          docker push hatamiarash7/mikrotik-exporter:manifest-amd64
          docker build -t hatamiarash7/mikrotik-exporter:manifest-arm32v7 --build-arg BASE_ARCH=arm32v7 --build-arg BINARY_ARCH=arm -f Dockerfile.arm .
          docker push hatamiarash7/mikrotik-exporter:manifest-arm32v7
          docker build -t hatamiarash7/mikrotik-exporter:manifest-arm64v8 --build-arg BASE_ARCH=arm64v8 --build-arg BINARY_ARCH=arm64 -f Dockerfile.arm .
          docker push hatamiarash7/mikrotik-exporter:manifest-arm64v8
          docker build -t hatamiarash7/mikrotik-exporter:manifest-i386 --build-arg BASE_ARCH=i386 --build-arg BINARY_ARCH=386 .
          docker push hatamiarash7/mikrotik-exporter:manifest-i386
          docker manifest create \
          hatamiarash7/mikrotik-exporter:manifest-latest \
          --amend hatamiarash7/mikrotik-exporter:manifest-amd64 \
          --amend hatamiarash7/mikrotik-exporter:manifest-arm32v7 \
          --amend hatamiarash7/mikrotik-exporter:manifest-arm64v8 \
          --amend hatamiarash7/mikrotik-exporter:manifest-i386
          docker push hatamiarash7/mikrotik-exporter:manifest-latest

      - name: Clear
        run: |
          rm -f ${HOME}/.docker/config.json
