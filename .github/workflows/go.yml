name: Go

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    name: Build & Publish binaries
    if: "!contains(github.event.head_commit.message, '[skip-ci]')"
    runs-on: ubuntu-latest
    steps:
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.13.8
        id: go

      - name: Check out code
        uses: actions/checkout@v2

      - name: Get dependencies
        run: |
          go get -v -t -d ./...
          if [ -f Gopkg.toml ]; then
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              dep ensure
          fi

      - name: Set SHORTSHA
        id: sha
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Read version
        id: version_env
        uses: falti/dotenv-action@v0.2.4
        with:
          path: .version

      - name: Build
        env:
          LDFLAGS: "-X main.appVersion=${{ steps.version_env.outputs.version }} -X main.shortSha=${{ steps.sha.outputs.sha_short }}"
        run: go build -v -ldflags="${{ env.LDFLAGS }}" .

      - name: Publish
        env:
          CGO_ENABLED: 0
          LDFLAGS: "-X main.appVersion=${{ steps.version_env.outputs.version }} -X main.shortSha=${{ steps.sha.outputs.sha_short }}"
        run: |
          go get github.com/mitchellh/gox
          go get github.com/tcnksm/ghr
          gox -os="linux freebsd netbsd" -arch="amd64 arm arm64 386" -parallel=8 -ldflags "${{ env.LDFLAGS }}" -output "dist/mikrotik-exporter_{{.OS}}_{{.Arch}}"
          ghr -t ${{ github.token }} -u ${{ github.actor }} -r Mikrotik-Exporter -replace ${{ steps.version_env.outputs.version }} dist/

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: binaries
          path: dist/mikrotik-exporter_linux_*

  docker:
    name: Build & Publish Docker image
    if: "!contains(github.event.head_commit.message, '[skip-ci]')"
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: binaries
          path: dist/

      - name: Display binary list
        run: ls -R
        working-directory: dist/

      - name: Read version
        id: version_env
        uses: falti/dotenv-action@v0.2.4
        with:
          path: .version

      - name: Prepare
        id: prepare
        run: |
          DOCKER_IMAGE=hatamiarash7/mikrotik-exporter
          DOCKER_PLATFORMS=linux/amd64,linux/arm/v7,linux/arm64,linux/386
          VERSION=${{ steps.version_env.outputs.version }}
          TAGS="--tag ${DOCKER_IMAGE}:${VERSION} --tag ${DOCKER_IMAGE}:latest"

          echo ::set-output name=docker_image::${DOCKER_IMAGE}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=buildx_args::--platform ${DOCKER_PLATFORMS} \
            --build-arg VERSION=${VERSION} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=${GITHUB_SHA::8} \
            ${TAGS} --file Dockerfile .

      - name: Set up Docker Buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v3
        with:
          buildx-version: latest
          qemu-version: latest

      - name: Docker Buildx (build)
        run: |
          docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args }}

      - name: Docker Login
        if: success() && github.event_name != 'pull_request'
        env:
          DOCKER_USERNAME: ${{ github.actor }}
          DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          echo "${{ env.DOCKER_PASSWORD }}" | docker login --username "${{ env.DOCKER_USERNAME }}" --password-stdin

      - name: Docker Buildx (push)
        if: success() && github.event_name != 'pull_request'
        run: |
          docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args }}

      - name: Docker Check Manifest
        if: always() && github.event_name != 'pull_request'
        run: |
          docker run --rm mplatform/mquery ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}

      - name: Clear
        if: always() && github.event_name != 'pull_request'
        run: |
          rm -f ${HOME}/.docker/config.json
